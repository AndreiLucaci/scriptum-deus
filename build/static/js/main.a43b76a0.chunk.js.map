{"version":3,"sources":["components/BiblePassage/BiblePassage.tsx","api/scriptumDeus/base.ts","api/scriptumDeus/api.ts","api/scriptumDeus/configuration.ts","api/scriptumDeusApi.ts","components/ForToday/ForToday.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Typography","BiblePassage","props","span","level","payload","book","chapters","map","x","chapter","number","dataSource","verses","key","columns","title","dataIndex","pagination","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","BibleApiAxiosParamCreator","Error","getDaily","date","a","options","localVarPath","localVarUrlObj","globalImportUrl","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","apiKey","localVarApiKeyValue","undefined","Date","toISOString","substr","query","search","headersFromBaseOptions","headers","url","BibleApiFp","localVarAxiosArgs","axiosRequestArgs","request","BibleApi","then","Configuration","param","username","password","accessToken","scriptumDeusApi","type","baseConfig","_","merge","ForToday","api","create","useState","dayText","setDayText","loadData","result","data","useQuery","isLoading","error","useEffect","rawText","text","decodedText","decodeURIComponent","atob","split","c","charCodeAt","toString","slice","join","JSON","parse","message","style","textAlign","margin","display","_static","forToday","oldT","newT","queryClient","QueryClient","Content","Layout","Header","Footer","Sider","App","QueryClientProvider","client","className","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a43b76a0.chunk.js","sourcesContent":["import { Col, Row, Table, Typography } from \"antd\";\nimport React, { FC } from \"react\";\nimport { BibleResponse, Chapter, Verse } from \"../../types\";\n\nconst { Title } = Typography;\n\ntype Key = { key: string };\ntype DataSourceVerse = Verse & Key;\ntype Props<T> = {\n  payload: T;\n};\n\nexport const BiblePassage: FC<Props<BibleResponse>> = (props) => {\n  const outputChapter = (chapter: Chapter) => {\n    const getVerseDS = (): DataSourceVerse[] => {\n      return chapter.verses.map((x) => {\n        const verseDS: DataSourceVerse = {\n          ...x,\n          key: `${chapter.number}-${x.number}`,\n        };\n        return verseDS;\n      });\n    };\n\n    const columns = [\n      {\n        title: \"Nr\",\n        dataIndex: \"number\",\n        key: \"number\",\n      },\n      {\n        title: \"Verset\",\n        dataIndex: \"verse\",\n        key: \"verse\",\n      },\n    ];\n\n    return (\n      <>\n        <Row>\n          <Col span={24}>\n            <Title level={5}>Capitolul {chapter.number}</Title>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Table\n              dataSource={getVerseDS()}\n              columns={columns}\n              pagination={false}\n            ></Table>\n          </Col>\n        </Row>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Row>\n        <Col span={24}>\n          <Title level={5}> {props.payload.book} </Title>\n        </Col>\n      </Row>\n      {props.payload.chapters ? (\n        props.payload.chapters.map((x) => outputChapter(x))\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","// tslint:disable\n/**\n * Scriptum Deus\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosInstance } from \"axios\";\nimport { Configuration } from \"./configuration\";\n\nexport const BASE_PATH = \"https://scriptum-deus-api-v1.eu-gb.cf.appdomain.cloud\".replace(\n  /\\/+$/,\n  \"\"\n);\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","// tslint:disable\n/**\n * Scriptum Deus\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosInstance, AxiosPromise } from \"axios\";\nimport * as globalImportUrl from \"url\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BaseAPI, BASE_PATH, RequestArgs } from \"./base\";\nimport { Configuration } from \"./configuration\";\n\n/**\n *\n * @export\n * @interface DailyResponse\n */\nexport interface DailyResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyResponse\n   */\n  forToday: string;\n  /**\n   *\n   * @type {DailyResponseDisplay}\n   * @memberof DailyResponse\n   */\n  display?: DailyResponseDisplay;\n  /**\n   *\n   * @type {string}\n   * @memberof DailyResponse\n   */\n  text: string;\n}\n/**\n *\n * @export\n * @interface DailyResponseDisplay\n */\nexport interface DailyResponseDisplay {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyResponseDisplay\n   */\n  _static: string;\n  /**\n   *\n   * @type {string}\n   * @memberof DailyResponseDisplay\n   */\n  date: string;\n}\n/**\n *\n * @export\n * @interface HealthCheckResponse\n */\nexport interface HealthCheckResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckResponse\n   */\n  status: string;\n}\n\n/**\n * BibleApi - axios parameter creator\n * @export\n */\nexport const BibleApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * get daily passage\n     * @summary get daily passage\n     * @param {string} [date]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDaily: async (\n      date?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/daily`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication jwt required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === \"function\"\n            ? await configuration.apiKey(\"Authorization\")\n            : await configuration.apiKey;\n        localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n      }\n\n      if (date !== undefined) {\n        localVarQueryParameter[\"date\"] =\n          (date as any) instanceof Date\n            ? (date as any).toISOString().substr(0, 10)\n            : date;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      // @ts-ignore\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * BibleApi - functional programming interface\n * @export\n */\nexport const BibleApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * get daily passage\n     * @summary get daily passage\n     * @param {string} [date]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDaily(\n      date?: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyResponse>\n    > {\n      const localVarAxiosArgs = await BibleApiAxiosParamCreator(\n        configuration\n      ).getDaily(date, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * BibleApi - factory interface\n * @export\n */\nexport const BibleApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * get daily passage\n     * @summary get daily passage\n     * @param {string} [date]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDaily(date?: string, options?: any): AxiosPromise<DailyResponse> {\n      return BibleApiFp(configuration)\n        .getDaily(date, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * BibleApi - object-oriented interface\n * @export\n * @class BibleApi\n * @extends {BaseAPI}\n */\nexport class BibleApi extends BaseAPI {\n  /**\n   * get daily passage\n   * @summary get daily passage\n   * @param {string} [date]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BibleApi\n   */\n  public getDaily(date?: string, options?: any) {\n    return BibleApiFp(this.configuration)\n      .getDaily(date, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n\n/**\n * HealthCheckApi - axios parameter creator\n * @export\n */\nexport const HealthCheckApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * api health check\n     * @summary api health check\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getHealthcheck: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/health-check`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: \"GET\",\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication jwt required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === \"function\"\n            ? await configuration.apiKey(\"Authorization\")\n            : await configuration.apiKey;\n        localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      };\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      // @ts-ignore\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * HealthCheckApi - functional programming interface\n * @export\n */\nexport const HealthCheckApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * api health check\n     * @summary api health check\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getHealthcheck(\n      options?: any\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string\n      ) => AxiosPromise<HealthCheckResponse>\n    > {\n      const localVarAxiosArgs = await HealthCheckApiAxiosParamCreator(\n        configuration\n      ).getHealthcheck(options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * HealthCheckApi - factory interface\n * @export\n */\nexport const HealthCheckApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * api health check\n     * @summary api health check\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getHealthcheck(options?: any): AxiosPromise<HealthCheckResponse> {\n      return HealthCheckApiFp(configuration)\n        .getHealthcheck(options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * HealthCheckApi - object-oriented interface\n * @export\n * @class HealthCheckApi\n * @extends {BaseAPI}\n */\nexport class HealthCheckApi extends BaseAPI {\n  /**\n   * api health check\n   * @summary api health check\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof HealthCheckApi\n   */\n  public getHealthcheck(options?: any) {\n    return HealthCheckApiFp(this.configuration)\n      .getHealthcheck(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","// tslint:disable\n/**\n * Scriptum Deus\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    basePath?: string;\n    baseOptions?: any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name?: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n}\n","import _ from \"lodash\";\nimport { Configuration } from \"./scriptumDeus\";\nimport { BaseAPI } from \"./scriptumDeus/base\";\n\nexport * from \"./scriptumDeus\";\n\nexport interface IScriptumDeusApi {\n  create<T extends BaseAPI>(\n    type: { new (configuration: Configuration): T },\n    configuration?: Configuration\n  ): T;\n}\n\nclass ScriptumApi implements IScriptumDeusApi {\n  create<T extends BaseAPI>(\n    type: { new (configuration: Configuration): T },\n    configuration?: Configuration\n  ): T {\n    const baseConfig: Configuration = new Configuration();\n\n    const config: Configuration = _.merge(baseConfig, configuration);\n\n    return new type(config);\n  }\n}\n\nexport const scriptumDeusApi: IScriptumDeusApi = new ScriptumApi();\nexport default scriptumDeusApi;\n","import { Col, Row, Typography } from \"antd\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { BibleApi, scriptumDeusApi } from \"../../api\";\nimport { DayResponse } from \"../../types\";\nimport { BiblePassage } from \"../BiblePassage\";\n\nconst { Title } = Typography;\n\nexport const ForToday: FC = () => {\n  const api = scriptumDeusApi.create(BibleApi);\n  const [dayText, setDayText] = useState<DayResponse>();\n\n  const loadData = async () => {\n    const { data: result } = await api!.getDaily();\n\n    return result;\n  };\n\n  const { isLoading, error, data } = useQuery(\"repoData\", loadData);\n\n  const b64DecodeUnicode = (str: string) => {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(\n      atob(str)\n        .split(\"\")\n        .map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n  };\n\n  useEffect(() => {\n    const rawText = data?.text!;\n    if (rawText) {\n      const decodedText = b64DecodeUnicode(rawText);\n      setDayText(JSON.parse(decodedText));\n    }\n  }, [data]);\n\n  if (isLoading)\n    return (\n      <Row>\n        <Col span={24}>Content is loading</Col>\n      </Row>\n    );\n\n  if (error) {\n    return (\n      <Row>\n        <Col span={24}>{(error as Error).message}</Col>\n      </Row>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\", margin: \"0 auto\" }}>\n      <Row>\n        <Col span={24}>\n          <Title level={5}>\n            {data?.display?._static} {data?.display?.date} {data?.forToday}\n          </Title>\n        </Col>\n      </Row>\n      {dayText?.oldT ? (\n        <>\n          <Row>\n            <Col span={24}>\n              <Title level={5}>Vechiul Testament</Title>\n            </Col>\n          </Row>\n          <BiblePassage payload={dayText.oldT}></BiblePassage>\n        </>\n      ) : (\n        <></>\n      )}\n      {dayText?.newT ? (\n        <>\n          <Row>\n            <Col span={24}>\n              <Title level={5}>Noul Testament</Title>\n            </Col>\n          </Row>\n          <BiblePassage payload={dayText.newT}></BiblePassage>\n        </>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default ForToday;\n","import { Layout, Typography } from \"antd\";\nimport React, { FC } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport \"./App.css\";\nimport { ForToday } from \"./components\";\n\nconst queryClient = new QueryClient({});\n// import { store } from \"./redux\";\n\nconst { Title } = Typography;\nconst { Content, Header, Footer, Sider } = Layout;\n\nconst App: FC = () => (\n  // <Provider store={store}>\n  <QueryClientProvider client={queryClient}>\n    <Layout>\n      <Sider className=\"sider\">Sider</Sider>\n      <Layout>\n        <Header className=\"header\">\n          <Title> Scriptum Deus </Title>\n        </Header>\n        <Content style={{ textAlign: \"center\", width: \"90%\" }}>\n          <ForToday></ForToday>\n        </Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    </Layout>\n  </QueryClientProvider>\n\n  // </Provider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}